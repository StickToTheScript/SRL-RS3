(*
Pixel Shift
===========

A file that stores all functions that have anything to do with pixel shifting.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/utilities/pixelshift.simba>`_.

*)

{$f-}

(*
getPixelShift
~~~~~~~~~~~~~

.. code-block:: pascal

    function getPixelShift(b: TBoxArray; time: integer): TIntegerArray;

Calculates how many pixels change in each box in "b" over the "time" (in milliseconds).
Returns the shifts in a TIntegerArray.

.. note::

    - by marpis
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    s := getPixelShift([intToBox(100, 100, 200, 200)], 500);
*)
function getPixelShift(b: TBoxArray; time: integer): TIntegerArray;
var
  l, i: integer;
  bmpBefore, bmpAfter: TIntegerArray;
begin
  l := length(b);
  setLength(bmpBefore, l);
  setLength(bmpAfter, l);
  setLength(result, l);

  // get the initial pixels
  for i := 0 to (l - 1) do
    bmpBefore[i] := bitmapFromClient(b[i].x1, b[i].y1, b[i].x2, b[i].y2);

  wait(time);

  // get pixels after the wait
  for i := 0 to (l - 1) do
    bmpAfter[i] := bitmapFromClient(b[i].x1, b[i].y1, b[i].x2, b[i].y2);

  // calculate the pixels that changed
  for i := 0 to (l - 1) do
    result[i] := calculatePixelShift(bmpBefore[i], bmpAfter[i], intToBox(0, 0, (b[i].x2 - b[i].x1), (b[i].y2 - b[i].y1)));

  freeBitmaps(bmpBefore);
  freeBitmaps(bmpAfter);
end;

(*
getPixelShift; overload;
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getPixelShift(b: TBox; time: integer): integer; overload;

Overload function. Takes a TBox parameter rather than a TBoxArray.

.. note::

    - by marpis
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    s := getPixelShift(minimap.getBounds(), 500);
*)
function getPixelShift(b: TBox; time: integer): integer; overload;
var
  arr: TIntegerArray;
begin
  arr := getPixelShift([b], time);
  result := arr[0];
end;

(*
getPixelShift; overload;
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getPixelShift(atpa: T2DPointArray; time: integer): TIntegerArray; overload;

Overload function. Returns the number of pixels shifted in each TPointArray in
"atpa" over the "time". Returns the shifts in a TIntegerArray.

.. note::

    - by Coh3n
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    s := getPixelShift(atpa, 500);
*)
function getPixelShift(atpa: T2DPointArray; time: integer): TIntegerArray; overload;
var
  b: TBox;
  l, i: integer;
  bmpBefore, bmpAfter: TIntegerArray;
begin
  l := length(atpa);
  setLength(bmpBefore, l);
  setLength(bmpAfter, l);
  setLength(result, l);

  // get the initial pixels
  for i := 0 to (l - 1) do
  begin
    b := atpa[i].getBounds();
    bmpBefore[i] := bitmapFromClient(b.x1, b.y1, b.x2, b.y2);
  end;

  wait(time);

  // get pixels after the wait
  for i := 0 to (l - 1) do
  begin
    b := atpa[i].getBounds();
    bmpAfter[i] := bitmapFromClient(b.x1, b.y1, b.x2, b.y2);
  end;

  // calculate the pixels that changed
  for i := 0 to (l - 1) do
  begin
    b := atpa[i].getBounds();
    atpa[i].offset(point(-b.x1, -b.y1));
    result[i] := calculatePixelShiftTPA(bmpBefore[i], bmpAfter[i], atpa[i]);
  end;

  freeBitmaps(bmpBefore);
  freeBitmaps(bmpAfter);
end;

(*
getPixelShift; overload;
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getPixelShift(tpa: TPointArray; t: integer): integer; overload;

Overload function. Takes a TPointArray parameter rather than a T2DPointArray.

.. note::

    - by Coh3n
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    s := getPixelShift(TPAFromBox(minimap.getBounds()), 500);
*)
function getPixelShift(tpa: TPointArray; t: integer): integer; overload;
var
  arr: TIntegerArray;
begin
  arr := getPixelShift([tpa], t);
  result := arr[0];
end;

(*
getPixelShiftAverage
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getPixelShiftAverage(b: TBoxArray; waitPerLoop, maxTime: integer): TIntegerArray;

Returns the average pixel shifts in each box in "b" over "maxTime", waiting
"waitPerLoop" milliseconds between pixel shift checks.

.. note::

    - by Coh3n
    - Last Updated: 10 October 2014 by Bonsai

Example:

.. code-block:: pascal

    s := getPixelShift([intToBox(100, 100, 200, 200)], 50, 500);
*)
function getPixelShiftAverage(b: TBoxArray; waitPerLoop, maxTime: integer): TIntegerArray;
var
  len, i, j: integer;
  samples: array of TIntegerArray;
  tmp: TIntegerArray;
  timer: TTimeMarker;

begin
   i := 0;
   timer.start();
   while (timer.getTime() < maxTime) do
   begin
      setLength(samples, i + 1);
      samples[i] := getPixelShift(b, waitPerLoop);
      inc(i);
   end;

   setLength(tmp, i);
   len := length(b);
   setLength(result, len);

   for i := 0 to (len - 1) do
   begin
      for j := 0 to high(samples) do
         tmp[j] := samples[j][i];

      result[i] := tmp.average();
   end;
end;

(*
getPixelShiftAverage; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getPixelShiftAverage(b: TBox; waitPerLoop, maxTime: integer): integer; overload;

Returns the average pixel shift in box "b" over "maxTime", waiting "waitPerLoop"
between getPixelShift calls.

.. note::

    - by Coh3n
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    s := getPixelShift(minimap.getBounds(), 50, 500);
*)
function getPixelShiftAverage(b: TBox; waitPerLoop, maxTime: integer): integer; overload;
var
  arr: TIntegerArray;
begin
  arr := getPixelShiftAverage([b], waitPerLoop, maxTime);
  result := arr[0];
end;

(*
getPixelShiftAverage; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getPixelShiftAverage(atpa: T2DPointArray; waitPerLoop, maxTime: integer): TIntegerArray; overload;

Returns the average pixel shifts in each TPointArray in "atpa" over "maxTime", waiting
"waitPerLoop" milliseconds between pixel shift checks.

.. note::

    - by Coh3n
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    s := getPixelShift(atpa, 50, 500);
*)
function getPixelShiftAverage(atpa: T2DPointArray; waitPerLoop, maxTime: integer): TIntegerArray; overload;
var
  l, i: integer;
  t : LongWord;
  shifts: array of TIntegerArray;
begin
  l := length(atpa);
  setLength(result, l);

  t := (getSystemTime() + maxTime);

  while (getSystemTime() < t) do
    for i := 0 to (l - 1) do
    begin
      setLength(shifts, length(shifts) + 1);
      shifts[high(shifts)] := getPixelShift(atpa, waitPerLoop);
    end;

  for i := 0 to (l - 1) do
    result[i] := averageTIA(shifts[i]);
end;

(*
getPixelShiftAverage; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getPixelShiftAverage(b: TPointArray; waitPerLoop, maxTime: integer): integer; overload;

Description of the function here.

.. note::

    - by Coh3n
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    s := getPixelShift(tpa, 50, 500);
*)
function getPixelShiftAverage(b: TPointArray; waitPerLoop, maxTime: integer): integer; overload;
var
  arr: TIntegerArray;
begin
  arr := getPixelShiftAverage([b], waitPerLoop, maxTime);
  result := arr[0];
end;

{$f+}
