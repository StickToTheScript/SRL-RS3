(*
Mouse
=====

The Mouse file contains all mouse movement and clicking functions.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/core/mouse.simba>`_.

*)

(*
var mouseSpeed
~~~~~~~~~~~~~~

Adjustable global mouse speed variable. Default set to 20.

Example

.. code-block:: pascal

    mouseSpeed := 50;
*)
var
  mouseSpeed: Integer = 70;

  
{*
MoveMouse
~~~~~~~~~

.. code-block:: pascal

    procedure MoveMouse(X, Y: Int32);

Overrides the default MoveMouse function in Simba and draws a
cursor on the screen using the Overlay.

.. note::

    - by BenLand100 & Flight

Example:

.. code-block:: pascal

    See mouse().
*}
{$IFDEF NAS}
  {$IFDEF DRAW_MOUSE}
  procedure MoveMouse(X, Y: Int32); override;
  begin
    Overlay.Bitmap.drawClear(0);
    Overlay.Bitmap.Rectangle([X-2, Y-2, X+2, Y+2], 255);
    inherited;
  end;
  {$ENDIF}
{$ENDIF}

{$f-}

{*
_brakeWindMouse
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure _brakeWindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait,
          targetArea: extended; double: boolean);

Mouse movement based on distance to determine speed. Default slowed
speed at 20% from destination, if 'double' is set to true then slowed
speed also starts at origin and ends 80% to destination.

.. note::

    - by BenLand100 & Flight

Example:

.. code-block:: pascal

    See mouse().
*}
procedure _brakeWindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait,
          targetArea: extended; double: boolean);
var
  veloX,veloY,windX,windY,veloMag,dist,randomDist,lastDist,D: extended;
  lastX,lastY,MSP,W,TDist: integer;
  T : LongWord;
  sqrt2,sqrt3,sqrt5,PDist,maxStep,dModA,dModB,nModA,nModB: extended;
begin
  MSP  := mouseSpeed;
  sqrt2:= sqrt(2);
  sqrt3:= sqrt(3);
  sqrt5:= sqrt(5);

  TDist := distance(round(xs), round(ys), round(xe), round(ye));
  if (TDist < 1) then
    TDist := 1;

  dModA := 0.88; //.80
  dModB := 0.95; //.90

  if (TDist > 220) then
  begin
    nModA := 0.08;
    nModB := 0.04;
  end else if (TDist <= 220) then
  begin
    nModA := 0.20;
    nModB := 0.10;
  end;

  t := getSystemTime() + 5000;
  repeat
    if (getSystemTime() > t) then
      break;

    dist:= hypot(xs - xe, ys - ye);
    wind:= min(wind, dist);
    if (dist < 1) then
      dist := 1;
    PDist := (dist/TDist);
    if (PDist < 0.01) then
      PDist := 0.01;

    if double then
    begin
      if (PDist <= dModA) then
      begin
        D := (round((round(dist)*0.3))/5);
        if (D < 20) then
          D := 20;

      end else if (PDist > dModA) then
      begin
        if (PDist < dModB) then
          D := randomRange(5, 8)
        else if (PDist >= dModB) then
          D := randomRange(3, 4);
      end;
    end;

    if (PDist >= nModA) then
    begin
       D := (round((round(dist)*0.3))/5);
      if (D < 20) then
        D := 20;
    end else if (PDist < nModA) then
    begin
      if (PDist >= nModB) then
        D := randomRange(5, 8)
      else if (PDist < nModB) then
        D := randomRange(3, 4);
    end;

    if (D <= round(dist)) then
      maxStep := D
    else
      maxStep := round(dist);

    if dist >= targetArea then
    begin
      windX:= windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      windY:= windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
    end else
    begin
      windX:= windX / sqrt2;
      windY:= windY / sqrt2;
    end;

    veloX:= veloX + windX;
    veloY:= veloY + windY;
    veloX:= veloX + gravity * (xe - xs) / dist;
    veloY:= veloY + gravity * (ye - ys) / dist;

    if (hypot(veloX, veloY) > maxStep) then
    begin
      randomDist:= maxStep / 2.0 + random(round(maxStep) div 2);
      veloMag:= sqrt(veloX * veloX + veloY * veloY);
      veloX:= (veloX / veloMag) * randomDist;
      veloY:= (veloY / veloMag) * randomDist;
    end;

    lastX:= round(xs);
    lastY:= round(ys);
    xs:= xs + veloX;
    ys:= ys + veloY;

    if (lastX <> round(xs)) or (lastY <> round(ys)) then
      moveMouse(round(xs), round(ys));

    W := (random((round(100/MSP)))*6);
    if (W < 5) then
      W := 5;
    if double then
      if (PDist > dModA) then
        W := round(W*2.5)
    else
      W := round(W*1.2);
    wait(W);
    lastdist:= dist;
  until (hypot(xs - xe, ys - ye) < 1);

  if (round(xe) <> round(xs)) or (round(ye) <> round(ys)) then
    moveMouse(round(xe), round(ye));

  mouseSpeed := MSP;
end;

{*
_humanWindMouse
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure _humanWindMouse(xs, ys, xe, ye, gravity, wind, minWait,
      maxWait, targetArea: extended);

Moves the mouse like a human

.. note::

    - by BenLand100 & Flight

Example:

.. code-block:: pascal

    See mouse().
*}
procedure _humanWindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait, targetArea: extended);
var
  veloX,veloY,windX,windY,veloMag,dist,randomDist,lastDist,D: extended;
  lastX,lastY,MSP,W,TDist: integer;
  T : LongWord;
  sqrt2,sqrt3,sqrt5,maxStep,rCnc: extended;
begin
  MSP  := mouseSpeed;
  sqrt2:= sqrt(2);
  sqrt3:= sqrt(3);
  sqrt5:= sqrt(5);

  TDist := distance(round(xs), round(ys), round(xe), round(ye));
  t := getSystemTime() + 10000;
  repeat
    if (getSystemTime() > t) then
      break;

    dist:= hypot(xs - xe, ys - ye);
    wind:= min(wind, dist);
    if (dist < 1) then
      dist := 1;

    D := (round((round(TDist)*0.3))/7);
    if (D > 25) then
      D := 25;
    if (D < 5) then
      D := 5;

    rCnc := random(6);
    if (rCnc = 1) then
      D := randomRange(2,3);

    if (D <= round(dist)) then
      maxStep := D
    else
      maxStep := round(dist);

    if dist >= targetArea then
    begin
      windX:= windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      windY:= windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
    end else
    begin
      windX:= windX / sqrt2;
      windY:= windY / sqrt2;
    end;

    veloX:= veloX + windX;
    veloY:= veloY + windY;
    veloX:= veloX + gravity * (xe - xs) / dist;
    veloY:= veloY + gravity * (ye - ys) / dist;

    if (hypot(veloX, veloY) > maxStep) then
    begin
      randomDist:= maxStep / 2.0 + random(round(maxStep) div 2);
      veloMag:= sqrt(veloX * veloX + veloY * veloY);
      veloX:= (veloX / veloMag) * randomDist;
      veloY:= (veloY / veloMag) * randomDist;
    end;

    lastX:= round(xs);
    lastY:= round(ys);
    xs:= xs + veloX;
    ys:= ys + veloY;

    if (lastX <> round(xs)) or (lastY <> round(ys)) then
      moveMouse(round(xs), round(ys));

    W := (random((round(100/MSP)))*6);
    if (W < 5) then
      W := 5;
    W := round(W*0.9);
    wait(W);
    lastdist:= dist;
  until (hypot(xs - xe, ys - ye) < 1);

  if (round(xe) <> round(xs)) or (round(ye) <> round(ys)) then
    moveMouse(round(xe), round(ye));

  mouseSpeed := MSP;
end;

(*
fastClick
~~~~~~~~~

.. code-block:: pascal

    procedure fastClick(button: integer);

Quickly click the mouse with any button.

.. note::

    - by Flight

Example:

.. code-block:: pascal

    fastClick(MOUSE_LEFT);

*)
procedure fastClick(button: integer);
var
  x, y: integer;
begin
  if (button = MOUSE_MOVE) then
    exit();

  getMousePos(x, y);
  holdMouse(x, y, button);

  wait(randomRange(60, 150));

  getMousePos(x, y);
  releaseMouse(x, y, button);
end;

(*
mouse
~~~~~

.. code-block:: pascal

    procedure mouse(pnt: TPoint; button: integer; mmType: integer = MOUSE_HUMAN); overload;

Moves the mouse to 'pnt' using specified 'mmType' then clicks the mouse 'button'.

.. note::

    - by NCDS & Flight

Example:

.. code-block:: pascal

    mouse(point, mouse_Left, MOUSE_ACCURATE);

*)
procedure mouse(pnt: TPoint; button: integer; mmType: integer = MOUSE_HUMAN); overload;
var
  randSpeed: extended;
  x,y: integer;
begin
  if (button = MOUSE_NONE) then
    exit();

  randSpeed := (random(mouseSpeed) / 2.0 + mouseSpeed) / 10.0;
  getMousePos(x,y);

  if mmType = MOUSE_HUMAN then
    _humanWindMouse(x, y, pnt.x, pnt.y, MOUSE_HUMAN, 5, 10.0/randSpeed, 15.0/randSpeed, 10.0*randSpeed)
  else
    _brakeWindMouse(x, y, pnt.x, pnt.y, mmType, 3, 10.0/randSpeed, 15.0/randSpeed, 10.0*randSpeed, false);

  fastClick(button);
end;

(*
mouse() overload;
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure mouse(pnt: TPoint); overload;

Moves the mouse to 'pnt'.

.. note::

    - by NCDS & Flight

Example:

.. code-block:: pascal

    mouse(point(50, 50));
*)
procedure mouse(pnt: TPoint); overload;
begin
  mouse(pnt, MOUSE_MOVE);
end;

(*
mouse overload
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure mouse(x, y, randX, randY, button: integer = MOUSE_MOVE);

Moves the mouse to x, y, coords adding random randX and randY onto x and y.
The 'button' parameter is set to MOUSE_MOVE by default.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    mouse(100, 100, 5, 5, MOUSE_LEFT);
    mouse(100, 100, 5, 5);
*)
procedure mouse(x, y, randX, randY, button: integer = MOUSE_MOVE); overload;
begin
  mouse(point(x+random(randX), y+random(randY)), button);
end;

(*
moveMouse overload
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure moveMouse(p: TPoint);

An overloaded MoveMouse which takes a TPoint. Useful for when you want to teleport
the mouse.

.. note::

    - by Thomas

Example:

.. code-block:: pascal

    moveMouse(p)
*)
procedure moveMouse(p: TPoint); overload;
begin
  moveMouse(p.x, p.y);
end;

(*
missMouse
~~~~~~~~~

.. code-block:: pascal

    procedure missMouse(pnt: TPoint; correct: boolean = true);

Moves the mouse, but initially misses the target point (miss area determined by dist & speed)
then if correct = true it will correct itself.

.. note::

    - by Flight

Example:

.. code-block:: pascal

    missMouse(point);

*)
procedure missMouse(pnt: TPoint; correct: boolean = true);
var
  randSpeed: extended;
  x,y,x2,y2,a,dist,mp: integer;
begin
  a := mouseSpeed;
  getMousePos(x, y);
  dist := distance(x, y, pnt.x, pnt.y);
  mp := round(dist/150);
  if mp < 0 then
    mp := 1;

  randSpeed := (random(mouseSpeed) / 2.0 + mouseSpeed) / 10.0;
  x2 := randomRange(Pnt.x-(a*mp), Pnt.x+(a*mp));
  y2 := randomRange(Pnt.y-(a*mp), Pnt.y+(a*mp));
  _humanWindMouse(x, y, x2, y2, MOUSE_HUMAN, 5, 10.0/randSpeed, 15.0/randSpeed, 10.0*randSpeed);
  getMousePos(x, y);

  if correct then
    mouse(pnt);

  mouseSpeed := a;
end;

(*
dragMouse
~~~~~~~~~

.. code-block:: pascal

    procedure dragMouse(dest: TPoint);

Clicks MOUSE_LEFT at current position and drags to dest(ination).

.. note::

    - by NCDS & Naum

Example:

.. code-block:: pascal

    dragMouse(point);

*)
procedure dragMouse(dest: TPoint);
var
  x, y: integer;
begin
  getMousePos(x, y);
  holdMouse(x, y, MOUSE_LEFT);
  wait(random(100));
  mouse(dest);
  getMousePos(x, y);
  wait(random(100));
  releaseMouse(x, y, MOUSE_LEFT);
end;

(*
mouseScroll()
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure mouseScroll(pnt: TPoint; scrolls: integer; down: boolean = true);

Moves the mouse to "pnt", and scrolls the mouse wheel in a human way.  Will
scroll the number of times declared by "scrolls".  Will scroll up or down depending
on the 'down' parameter (set to true by default).

.. note::

    - by Coh3n
    - Last Updated: 23 July 2013 by Coh3n

Example:

.. code-block:: pascal

    mouseScroll(p, 50);
    mouseScroll(p, 10, false);
*)
procedure mouseScroll(pnt: TPoint; scrolls: integer; down: boolean = true);
var
  x, y, c, downInt, upInt: integer;
begin
  {$IFDEF LINUX}
    downInt := 1; upInt := -1;
  {$ELSE}
    downInt := -1; upInt := 1;
  {$ENDIF}
  mouse(pnt, MOUSE_MOVE);
  getMousePos(x, y);

  repeat
    if down then
      scrollMouse(x, y, downInt)
    else
      scrollMouse(x, y, upInt);

    wait(16 + random(200));
    inc(c);
  until(c >= scrolls);
end;

(*
mouseBox
~~~~~~~~

.. code-block:: pascal

    procedure mouseBox(b: TBox; button: integer = MOUSE_MOVE);

Moves the mouse somewhere inside the box 'b', with more change of being around
the middle of the box. The 'button' is set to MOUSE_MOVE by default.

.. note::

    - by Coh3n
    - Last Updated: 17 March 2013 by Coh3n

Example:

.. code-block:: pascal

    mouseBox(b, MOUSE_LEFT);
*)
procedure mouseBox(b: TBox; button: integer = MOUSE_MOVE; mmType: integer = MOUSE_HUMAN);
var
  p: TPoint;
  x, y: integer;
begin
  getMousePos(x, y);

  if (not pointInBox(point(x, y), b)) then // if the mouse is already in the box
  begin
    gaussBox(p, b);
    mouse(p, button, mmType);
  end else
    mouse(point(x, y), button, mmType);
end;

(*
mouseOval
~~~~~~~~~

.. code-block:: pascal

    procedure mouseOval(cx, cy, rx, ry, mouseAction: Integer = MOUSE_MOVE);

Clicks a random point within an oval shape.
    * cx, cy: The center point of the oval.
    * rx, ry: X and Y radius of the oval.
    * mouseAction: the action of the mouse. Default set to MOUSE_MOVE;

.. note::

    - by mixster
    - Last Updated: 16 March 2013 by Coh3n

Example:

.. code-block:: pascal

    mouseOval(100, 100, 50, 30);
*)
procedure mouseOval(cx, cy, rx, ry, mouseAction: Integer = MOUSE_MOVE);
var
  a: single;
  p: TPoint;
begin
  a := randomE() * PI * 2;
  p.x := cx + round(cos(a) * randomRange(-rx, rx));
  p.y := cy + round(sin(a) * randomRange(-ry, ry));
  mouse(p, mouseAction);
end;

procedure mouseOval(P: Tpoint; rx, ry, mouseAction: Integer = MOUSE_MOVE); overload;
begin
  mouseOval(P.X, P.Y, rx, ry, mouseAction);
end;

(*
mouseCircle
~~~~~~~~~~~

.. code-block:: pascal

    procedure mouseCircle(MidX, MidY, Radius, mouseAction: Integer = MOUSE_MOVE);

Same as mouseOval, but within a circle instead.

.. note::

    - by mixster
    - Last Updated: 21 March 2012 by Coh3n

Example:

.. code-block:: pascal

    mouseCircle(50, 50, 25);
*)
procedure mouseCircle(MidX, MidY, Radius, mouseAction: Integer = MOUSE_MOVE);
begin
  mouseOval(MidX, MidY, Radius, Radius, mouseAction);
end;

procedure mouseCircle(P: Tpoint; Radius, mouseAction: Integer = MOUSE_MOVE); overload;
begin
  mouseOval(P.X, P.Y, Radius, Radius, mouseAction);
end;

(*
didClick
~~~~~~~~

.. code-block:: pascal

    function didClick(Red: Boolean; Time: Integer = 1000): boolean;

Left clicks the current mouse position and looks for the colored X. Times out
after 'Time'. The 'Time' is set to 1000 by default.

.. note::

    - by Rasta Magician, Narcle, Coh3n
    - Last Updated: 14 Jan 2014 by The Mayor

Example:

.. code-block:: pascal

    if didClick(true) then
      writeLn('Clicked an object!');
*)
function didClick(red: Boolean; time: Integer = 1000): boolean;
var
  x, y, R, G: integer;
  timeOut : LongWord;
  b: TBox;
begin
  fastClick(MOUSE_LEFT);

  getMousePos(x, y);
  b := intToBox(x - 15, y - 15, x + 15, y + 15);
  b.setLimit(getClientBounds());

  timeOut := getSystemTime() + time;

  while (getSystemTime() < timeOut) and (not result) do
  begin
    R := countColorTolerance(395403, b, 25);
    G := countColorTolerance(1558685, b, 35);

    if red then
    begin
      if (G > 8) then
        exit(false);

      result := (R > 20);
    end else
    begin
      if (r > 5) then
        exit(false);

      result := (G > 35);
    end;
  end;
end;

(*
multiClick
~~~~~~~~~~

.. code-block:: pascal

    function multiClick(p: TPoint; chance, maxClicks: integer): boolean;

Will simulate "spam" clicking on the point 'p'.  It will click random amount of
times between 1 and 'maxClicks'. It will always click once, then has a percent
'chance' of clicking again. Will not exceed 'maxClicks'.

.. note::

    - Author: Coh3n
    - Last Updated: 16 March 2013 by Coh3n

Example:

.. code-block:: pascal

    if isMouseOverText('Tree') then
      multiClick(p, 35, 5);
*)
function multiClick(p: TPoint; chance, maxClicks: integer): boolean;
var
  clicks: integer;
begin
  result := true;

  repeat
    inc(clicks);
    mouse(p, MOUSE_LEFT);

    if (random(100) > chance) or (not result) then
      break();

    wait(50 + random(50));
  until(clicks >= maxClicks);
end;

(*
getRealMousePos
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure getRealMousePos(var x, y : Integer);

Retrives the position of the real (not smart) mouse relative to the
desktop client. Can be used to create an interactive GUI drawn on smart.

.. note::

    - Author: Zyt3x

Example:

.. code-block:: pascal

    getRealMousePos(x, y);
*)
procedure getRealMousePos(var X, Y : Integer);
var
  KMTarget, ITarget : Integer;
begin
  KMTarget := getKeyMouseTarget();
  ITarget := getImageTarget();
  setDesktopAsClient();
  system.getMousePos(X, Y);
  setKeyMouseTarget(KMTarget);
  setImageTarget(ITarget);
end;

(*
getRealMousePos
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure getRealMousePos(var P : TPoint); overload;

An averload of the above method, which takes a TPoint instead

.. note::

    - Author: Zyt3x

Example:

.. code-block:: pascal

    getRealMousePos(P);
    if isPointInBox(P, GUIclickBox) then
      writeLn('You pressed the button!);
*)
procedure getRealMousePos(var P : TPoint); overload;
begin
  getRealMousePos(P.X, P.Y);
end;

{$f+}
