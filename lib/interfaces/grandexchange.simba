(*
Grand Exchange
==============

The grandexchange file holds functions and procedures that are used to interact with the runescape Grand Exchange.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/grandexchange.simba>`_.

*)

{$f-}

(*
Consts, Types, Vars
~~~~~~~~~~~~~~~~~~~

The following constants, types and variables are used throughout the collectBox methods.

**const Grand Exchange Tabs**

  Constants that represent the two grandExchange tabs

    * GE_TAB_EXCHANGE
    * GE_TAB_HISTORY

*)
const
  GE_TAB_EXCHANGE = 0;
  GE_TAB_HISTORY = 1;
  GE_TAB_SETS = 2;

(*

**type TRSGrandExchange**

.. code-block:: pascal

    type
      TRSGrandExchange = type TRSInterface;

A type that stores the Grand Exchange interface properties.

*)
type
  TRSGrandExchange = record(TRSInterface)
    tabBoxes: TBoxArray;
end;

(*
**var grandExchange**

.. code-block:: pascal

    var
      grandExchange: TRSGrandExchange;

A variable through which scripters can access the TRSGrandExchange type methods.

*)
var
  grandExchange: TRSGrandExchange;

(*
TRSGrandExchange methods
~~~~~~~~~~~~~~~~~~~~~~~~~

The following methods should be called through the **grandExchange** variable.

Example:

.. code-block:: pascal

    if grandExchange.isOpen() then
      writeln('It''s open');
*)

{*
__init
------

.. code-block:: pascal

    procedure TRSGrandExchange.__init();

Initializes the TRSGrandExchange.

.. note::

    - by The Mayor
    - Last Updated: 9th October 2014 by Clarity

Example:

.. code-block:: pascal

    grandExchange.__init();

*}
{$IFNDEF CODEINSIGHT}
procedure TRSGrandExchange.__init();
begin
  with self do
  begin
    name := 'Grand Exchange';
    ID := ID_INTERFACE_GRANDEXCHANGE;
    parentID := -1;
    isStatic := false;
  end;
end;
{$ENDIF}

{*
__find
------

.. code-block:: pascal

    function TRSGrandExchange.__find(): boolean;

Returns true if the grandExchange interface is detected and its bounds are set.
Scripters should use grandExchange.isOpen() below.

.. note::

    - by The Mayor
    - Last Updated: 6 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    if grandExchange.__find() then
      writeln('The grandExchange is open, and the bounds are set!');
*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__find(): boolean;
const
  PINK_COLOR = [14581920, 0]; // [Col, Tol] pink item in the balance scale.
var
  i: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  b: TBox;
begin
  findColorsTolerance(TPA, PINK_COLOR[0], getClientBounds(), PINK_COLOR[1]);

  if length(TPA) < 10 then
  begin
    print('TRSGrandExchange.__find(): Didn''t find enough PINK_COLOR', TDebug.WARNING);
    exit(false);
  end;

  ATPA := TPA.cluster(5);
  ATPA.sortBySize(true);

  for i := 0 to high(ATPA) do
  begin
    b := ATPA[i].getBounds();

    if inRange(b.getWidth(), 10, 20) and (b.getHeight() < 20) then
    begin
      b.edit(21, -10, 114, 12);

      if (pos('GRAND', upperCase(TesseractOCR.Recognize(b, 50))) > 0) then
      begin
        self.setBounds([b.x1 - 88, b.y1 - 8, b.x2 + 570, b.y2 + 515]);
        setLength(self.tabBoxes, 4);
        self.tabBoxes[0] := [self.x1 + 27, self.y1 + 107, self.x1 + 156, self.y1+ 124]; // Grand Exchange
        self.tabBoxes[1] := [self.x1 + 167, self.y1 + 107, self.x1 + 262, self.y1+ 124]; // History
        self.tabBoxes[2] := [self.x1 + 276, self.y1 + 107, self.x1 + 336, self.y1+ 124]; // Sets
        self.tabBoxes[3] := [self.x1 + 350, self.y1 + 107, self.x1 + 437, self.y1+ 124]; // Favourites
        exit(true);
      end;
    end;

  end;
end;
{$ENDIF}

(*
isOpen
------

.. code-block:: pascal

    function TRSGrandExchange.isOpen(waitTime: integer = 0): boolean;

Returns true if the grandExchange is open. The optional **waitTime** parameter
*(default = 0)* is the maximum time (in milliseconds) it will keep looking.

.. note::

    - by The Mayor
    - Last Updated: 14 January 2015 by The Mayor

Example:

.. code-block:: pascal

    if grandExchange.isOpen() then
      writeln('The grandExchange is open!');

*)
function TRSGrandExchange.isOpen(waitTime: integer = 0): boolean;
var
  t: UInt64;
begin
  t := (GetTickCount() + waitTime);

  repeat
    if self.__find() then
    begin
      result := true;
      break();
    end;
  until (getTickCount() >= t);
  print('TRSGrandExchange.isOpen(): Result = ' + boolToStr(result));
end;

(*
close
-----

.. code-block:: pascal

    function TRSGrandExchange.close(escape: boolean = true): boolean;

Returns true if the grandExchange is successfully closed. It uses the ESC key
by default, but the **escape** parameter can be set to false to close via the mouse.

.. note::

    - by The Mayor
    - Last Updated: 6 July 2015 by The Mayor

Example:

.. code-block:: pascal

    if grandExchange.close() then
      writeln('Closed the grandExchange');

*)
function TRSGrandExchange.close(escape: boolean = true): boolean;
const
  __CLOSE_OFFSET: TPoint = [756, 22]; // From self(x1, y1) to middle of 'X'
var
  timeOut: UInt64;
begin
  if (not self.isOpen()) then
    exit(true);

  if escape then // Try the escape button first if possible
  begin
    timeOut := (GetTickCount() + randomRange(600, 900));
    repeat
      typeByte(VK_ESCAPE);
      wait(300 + random(50));
    until (not self.isOpen()) or (GetTickCount() > timeOut);

    if (not self.isOpen()) then
      exit(true);
  end;

  if self.isOpen(100 + random(50)) then // Wait a bit in case it closes
  begin
    mouse(point(self.x1 + __CLOSE_OFFSET.x, self.y1 + __CLOSE_OFFSET.y).rand(3), MOUSE_LEFT);
    timeOut := (GetTickCount() + randomRange(5000, 6000));

    while (timeOut > GetTickCount()) do
    begin
      if (not self.isOpen()) then
      begin
        result := true;
        break();
      end;
      wait(50 + random(50));
    end;
  end else
    result := true;

  print('TRSGrandExchange.close(): result = ' + boolToStr(result), TDebug.SUB);
end;

{*
__getActiveTab
--------------

.. code-block:: pascal

    function TRSGrandExchange.__getActiveTab(): Integer;

Returns the current tab number (0 - Grand Exchange | 1 - Sale History).

.. note::

    - by The Mayor
    - Last Updated: 9 July 2015 by The Mayor

Example:

.. code-block:: pascal

    writeLn(grandExchange.__getActiveTab());

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__getActiveTab(): Integer;
var
  i: Integer;
begin
  for i := 0 to high(self.tabBoxes) do
    if (not(getColor(round((self.tabBoxes[i].X1+self.tabBoxes[i].X2)/2), self.tabBoxes[i].Y2) = 8881013)) then
      exit(i);
end;
{$ENDIF}

(*
openTab
-------

.. code-block:: pascal

    function TRSGrandExchange.openTab(tab: Integer): Boolean;

Opens the grandExchange tab **tab** . The **tab** parameter should be one of the
two tab constants at the top of this page.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    grandExchange.openTab(GE_TAB_HISTORY);

*)
function TRSGrandExchange.openTab(tab: Integer): Boolean;
begin
  if (not self.isOpen()) then
    exit(false);

  if (self.__getActiveTab() = tab) then
    exit(true);

  for 0 to 3 do
  begin
    multiClick(self.tabBoxes[tab].getGaussPoint(), 30, 3);
    wait(random(800, 1200));
    if (self.__getActiveTab() = tab) then exit(true);
  end;
end;

(*
getPackSlotBox
--------------

.. code-block:: pascal

    function TRSGrandExchange.getPackSlotBox(slot: integer): TBox;

Returns a TBox of the pack slot **slot** in the grandExchange interface.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    var
      b: TBox;
    begin
      b := grandExchange.getPackSlotBox(1);
      mouseBox(b, MOUSE_MOVE);
    end;

*)
function TRSGrandExchange.getPackSlotBox(slot: integer): TBox;
const
  __PACK_OFFSET: TPoint = [582, 174]; // From self(x1, y1) to middle of first pack slot
begin
  result := gridBox(slot - 1, 4, 7, 36, 32, 46, 36, point(self.x1 + __PACK_OFFSET.x, self.y1 + __PACK_OFFSET.y));
end;

{*
__getSlotBoxes
--------------

.. code-block:: pascal

    function TRSGrandExchange.__getSlotBoxes(): TBoxArray;

Returns a TBoxArray of the 8 Grand Exchange slots.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    tba := grandExchange.__getSlotBoxes();

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__getSlotBoxes(): TBoxArray;
const
  __GE_SLOT_OFFSET: TPoint = [104, 203]; // From self(x1, y1) to middle of first GE slot
var
  tba: TBoxArray;
begin
  tba := grid(3, 3, 169, 121, 177, 128, point(self.x1 + __GE_SLOT_OFFSET.x, self.y1 + __GE_SLOT_OFFSET.y));
  tba.deleteIndex(8);
  result := tba;
end;
{$ENDIF}

{*
__getBuyBoxes
-------------

.. code-block:: pascal

    function TRSGrandExchange.__getBuyBoxes(): TBoxArray;

Returns a TBoxArray of the Grand Exchange buy boxes.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    tba := grandExchange.__getBuyBoxes();

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__getBuyBoxes(): TBoxArray;
const
  __BUY_OFFSET: TPoint = [74, 213]; // From self(x1, y1) to middle of first buy button
var
  tba: TBoxArray;
begin
  if not self.isOpen() then
  begin
    print('TRSGrandExchange.__getBuyBoxes(): Cannot click a buy box as the GE is not open', TDebug.ERROR);
    exit();
  end;
  tba := grid(3, 3, 44, 44, 177, 128, point(self.x1 + __BUY_OFFSET.x, self.y1 + __BUY_OFFSET.y));
  tba.deleteIndex(8);
  result := tba;
end;
{$ENDIF}

{*
__getSellBoxes
--------------

.. code-block:: pascal

    function TRSGrandExchange.__getSellBoxes(): TBoxArray;

Returns a TBoxArray of the Grand Exchange sell boxes.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    tba := grandExchange.__getSellBoxes();

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__getSellBoxes(): TBoxArray;
const
  __SELL_OFFSET: TPoint = [134, 213]; // From self(x1, y1) to middle of first sell button
var
  tba: TBoxArray;
begin
  tba := grid(3, 3, 44, 44, 177, 128, point(self.x1 + __SELL_OFFSET.x, self.y1 + __SELL_OFFSET.y));
  tba.deleteIndex(8);
  result := tba;
end;
{$ENDIF}

{*
__getInputBoxes
---------------

.. code-block:: pascal

    function TRSGrandExchange.__getInputBoxes(): TBoxArray;

Returns a TBoxArray of the Grand Exchange input boxes, where you can type.

.. note::

    - by Clarity
    - Last Updated: 19 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    tba := grandExchange.__getInputBoxes();

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__getInputBoxes(): TBoxArray;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: integer;
  searchBox : TBox;
begin
  grandExchange.__find();
  searchBox := [self.x1, self.y1 + 200, self.x2, self.y2]; // Added box to exclude header of GE which was giving false positive
  //writeln(searchBox);
  if findColors(TPA, 2366477, searchBox) then // Changed color
  begin
    ATPA := TPA.cluster(1);
    ATPA.sortFromMidPoint(Point(self.x1 + round((self.x2 - self.x1)*0.35), self.y1)); // 35% is *just* on the left side of half way between the quantity and price box
    result := ATPA.getEachBounds();
  end;
end;
{$ENDIF}


{*
__getAbortBoxes
---------------

.. code-block:: pascal

    function TRSGrandExchange.__getAbortBoxes(): TBoxArray;

Returns a TBoxArray of the Grand Exchange abort boxes on the mainscreen

.. note::

    - by 3Garrett3
    - Last Updated: 15 June 2020 by 3Garrett3

Example:

.. code-block:: pascal

    tba := grandExchange.__getAbortBoxes();

*}

{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__getAbortBoxes(): TBoxArray;
const
  __BUTTON_OFFSET: TPoint = [175, 156]; // From self(x1, y1) to middle of first buy button
var
  tba: TBoxArray;
begin
  if not self.isOpen() then
  begin
    print('TRSGrandExchange.__getBuyBoxes(): Cannot click a buy box as the GE is not open', TDebug.ERROR);
    exit();
  end;
  tba := grid(3, 3, 17, 17, 177, 128, point(self.x1 + __BUTTON_OFFSET.x, self.y1 + __BUTTON_OFFSET.y));
  tba.deleteIndex(8);
  result := tba;
end;
{$ENDIF}

{*
__getEditBoxes
---------------

.. code-block:: pascal

    function TRSGrandExchange.__getEditBoxes(): TBoxArray;

Returns a TBoxArray of the Grand Exchange edit boxes on the mainscreen

.. note::

    - by 3Garrett3
    - Last Updated: 16 June 2020 by 3Garrett3

Example:

.. code-block:: pascal

    tba := grandExchange.__getEditBoxes();

*}

{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__getEditBoxes(): TBoxArray;
const
  __BUTTON_OFFSET: TPoint = [32, 156]; // From self(x1, y1) to middle of first buy button
var
  tba: TBoxArray;
begin
  if not self.isOpen() then
  begin
    print('TRSGrandExchange.__getBuyBoxes(): Cannot click a buy box as the GE is not open', TDebug.ERROR);
    exit();
  end;
  tba := grid(3, 3, 17, 17, 177, 128, point(self.x1 + __BUTTON_OFFSET.x, self.y1 + __BUTTON_OFFSET.y));
  tba.deleteIndex(8);
  result := tba;
end;
{$ENDIF}

{*
__isOfferOpen
-------------

.. code-block:: pascal

    function TRSGrandExchange.__isOfferOpen(waitTime: integer = 500): boolean;

Returns true if the buy or sell offer screen is open.

.. note::

    - by The Mayor
    - Last Updated: 19 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    writeLn(grandExchange.__isOfferOpen());

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__isOfferOpen(waitTime: integer = 500): boolean;
var
  timeOut: UInt64;
  TPA: TPointArray;
  confirm: TBox := [self.x1 + 218, self.y1 + 508, self.x1 + 345, self.y1 + 526];
  backSpace: TBox := [self.x1 + 15, self.y2 - 46, self.x1 + 49, self.y2 - 22];
begin
  timeOut := GetTickCount() + waitTime;

  while (GetTickCount() < timeOut) do
    if findColors(TPA, 6247745, self.getBounds()) then // Changed to look for blue outline
    begin
      if (length(TPA) = 2862) or (length(TPA) = 952) then //Sell count is 2862, Buy is 952 with search box open
      begin
        result := True;
        break;
      end else
        // If we are hovering an item (sell offer) the count may be off, check for confirm button
      if countColorTolerance(2270960, confirm, 22, colorSetting(2, 0.11, 0.48)) > 1500 then
      begin
        result := True;
        break;
      end else
      // Detects the back button - Note that this will return true for Progress or Offer
      // Only required when hovering something (abort button for example) and the
      // Outline of the slot is covered
      if countColorTolerance(10462127, backSpace, 25, colorSetting(2, 0.20, 0.30)) > 200 then
      begin
        result := True;
        break;
      end;
      wait(randomRange(150,350));
    end;

  print('TRSGrandExchange.isOfferOpen() = ' + boolToStr(result), TDebug.SUB);
end;
{$ENDIF}

{*
__isProgressOpen
----------------

.. code-block:: pascal

    function TRSGrandExchange._isProgressOpen(waitTime: integer = 500): boolean;

Returns true if the offer in progress screen is open.

.. note::

    - by The Mayor
    - Last Updated: 27 July 2015 by Clarity

Example:

.. code-block:: pascal

    writeLn(grandExchange.__isProgressOpen());

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__isProgressOpen(waitTime: integer = 500): boolean;
var
  timeOut: int64;
  TPA: TPointArray;
  backSpace: TBox := [self.x1 + 15, self.y2 - 46, self.x1 + 49, self.y2 - 22];
begin
  timeOut := GetTickCount() + waitTime;
  //print('tRSGrandExchange.__isProgressOpen(): Starting');
  while (GetTickCount() < timeOut) do
  begin
    //print('tRSGrandExchange.__isProgressOpen(): findColors');
    if findColors(TPA, 6247745, self.getBounds()) then
    begin
      //print('tRSGrandExchange.__isProgressOpen(): Length = ' + toStr(length(TPA)));
      if (length(TPA) = 3501) then
      begin
        result := True;
        break();
      end else
      // Detects the back button - Note that this will return true for Progress or Offer
      // Only required when hovering something (abort button for example) and the
      // Outline of the slot is covered
      //print('tRSGrandExchange.__isProgressOpen(): Back button failsafe');
      if countColorTolerance(10462127, backSpace, 25, colorSetting(2, 0.20, 0.30)) > 200 then
      begin
        result := True;
        break;
      end;
    end;
  end;
  print('TRSGrandExchange.isProgressOpen() = ' + boolToStr(result), TDebug.SUB);
end;
{$ENDIF}

{*
__isSlotActive
--------------

.. code-block:: pascal

    function TRSGrandExchange.__isSlotActive(geSlot: integer): boolean;

Returns true if the slot **geSlot** is active. This is necessary
because slots 3 to 8 are inactive when you are not a member.

.. note::

    - by The Mayor
    - Last Updated: 19 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    writeLn(grandExchange.__isSlotActive(1));

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__isSlotActive(geSlot: integer): boolean;
var
  TPA: TPointArray;
  TBA : TBoxArray := self.__getSlotBoxes();
begin
  findColors(TPA, 4801334, TBA[geSlot - 1]); // Changed Color
  result := length(TPA) < 2500; // Changed count (should be found 2521 in inactive slots - most frequent non-black color)
end;
{$ENDIF}

{*
__isSlotEmpty
-------------

.. code-block:: pascal

    function TRSGrandExchange._isSlotEmpty(geSlot: integer): boolean;

Returns true if the offer slot **geSlot** is empty and avaliable to use.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    writeLn(grandExchange.__isSlotEmpty(2));

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__isSlotEmpty(geSlot: integer): boolean;
var
  TPA: TPointArray;
  TBA : TBoxArray := self.__getSlotBoxes();
begin
  if self.__isSlotActive(geSlot) then
  begin
    findColors(TPA, 2694922, TBA[geSlot - 1]);
    result := length(TPA) > 5000;
  end;

  print('TRSGrandExchange._isSlotEmpty(): Slot ' + toStr(geSlot) + ' = ' + boolToStr(result), TDebug.SUB);
end;
{$ENDIF}

{*
__isSlotComplete
----------------

.. code-block:: pascal

    function TRSGrandExchange.__isSlotComplete(geSlot: integer): boolean;

Returns true if the offer is slot **geSlot** is complete.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    writeLn(grandExchange.__isSlotComplete(2));

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__isSlotComplete(geSlot: integer): boolean;
var
  TBA: TBoxArray := self.__getSlotBoxes();
begin
  result := (countColorTolerance(1999423, TBA[geSlot - 1], 17) > 750);
  print('TRSGrandExchange.isSlotComplete(): Slot ' + toStr(geSlot) + ' = ' + boolToStr(result), TDebug.SUB);
end;
{$ENDIF}

{*
__isSlotAborted
---------------

.. code-block:: pascal

    function TRSGrandExchange.__isSlotAborted(geSlot: integer): boolean;

Returns true if the offer is slot **geSlot** is aborted.

.. note::

    - by The Mayor
    - Last Updated: 15 January 2015 by The Mayor

Example:

.. code-block:: pascal

    writeLn(grandExchange.__isSlotAborted(2));

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__isSlotAborted(geSlot: integer): boolean;
var
  TBA: TBoxArray := self.__getSlotBoxes();
begin
  result := (countColorTolerance(1048714, TBA[geSlot - 1], 1) > 1500);
  print('TRSGrandExchange.isSlotAborted(): Slot ' + toStr(geSlot) + ' = ' + boolToStr(result), TDebug.SUB);
end;
{$ENDIF}

{*
__isSlotBuying
--------------

.. code-block:: pascal

    function TRSGrandExchange.__isSlotBuying(geSlot: integer): boolean;

Returns true if the offer is slot **geSlot** is currently buying.

.. note::

    - by The Mayor
    - Last Updated: 19 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    writeLn(grandExchange.__isSlotBuying(2));

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__isSlotBuying(geSlot: integer; overrideComplete : Boolean = false): boolean;
var
  TBA: TBoxArray := self.__getSlotBoxes();
  TPA, TPA2: TPointArray;
begin
  if not overrideComplete then
    if (self.__isSlotAborted(geSlot) or self.__isSlotComplete(geSlot)) then
      exit(false);

  findColors(TPA, 3091496, TBA[geSlot - 1]); // Changed colors
  findColors(TPA2, 4407613, TBA[geSlot - 1]); // If hovering the box
  TPA.combine(TPA2);
  result := (length(TPA) > 10000);
  print('TRSGrandExchange.isSlotBuying(): Slot ' + toStr(geSlot) + ' = ' + boolToStr(result), TDebug.SUB);
end;
{$ENDIF}

{*
__isSlotSelling
---------------

.. code-block:: pascal

    function TRSGrandExchange.__isSlotSelling(geSlot: integer): boolean;

Returns true if the offer is slot **geSlot** is currently selling.

.. note::

    - by The Mayor
    - Last Updated: 31 July 2015 by The Mayor

Example:

.. code-block:: pascal

    writeLn(grandExchange._isSlotSelling(2));

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__isSlotSelling(geSlot: integer; overrideComplete : Boolean = false): boolean;
var
  TBA: TBoxArray := self.__getSlotBoxes();
  TPA, TPA2: TPointArray;
begin
  if not overrideComplete then
    if (self.__isSlotAborted(geSlot) or self.__isSlotComplete(geSlot)) then
      exit(false);

  findColors(TPA, 3287837, TBA[geSlot - 1]);
  findColors(TPA2, 4603955, TBA[geSlot - 1]); // If hovering the box
  TPA.combine(TPA2);
  result := (length(TPA) > 10000);
  print('TRSGrandExchange.isSlotSelling(): Slot ' + toStr(geSlot) + ' = ' + boolToStr(result), TDebug.SUB);
end;
{$ENDIF}

{*
__findInsertionCursor
---------------------

.. code-block:: pascal

    TRSGrandExchange.__findInsertionCursor(searchBox: TBox; waitTime: integer = 4000): boolean;

Returns true is the insertion cursor is found inside **searchBox** within the **waitTime**
*(default = 4000)* .

.. note::

    - by Clarity
    - Last Updated: 27 July 2015 by Clarity

Example:

.. code-block:: pascal

    writeLn(grandExchange.__findInsertionCursor(b));

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__findInsertionCursor(searchBox: TBox; waitTime: integer = 4000): boolean;
var
  timeOut: UInt64;
  TPA: TPointArray;
begin
  timeOut := GetTickCount() + waitTime;

  while GetTickCount() < timeOut do
  begin
    findColors(TPA, 14606050, searchBox);
    if length(TPA) > 0 then
      exit(true);
  end;
end;
{$ENDIF}

{*
__enterBuyQuantity
---------------

.. code-block:: pascal

    procedure TRSGrandExchange.__enterBuyQuantity(quantity: string);

Returns true if it successfully enters the desired item quantity **quantity**
into the input box.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2020 by 3Garrett3

Example:

.. code-block:: pascal

    grandExchange.__enterBuyQuantity('1500'); // To buy 1500 of an item
    grandExchange.__enterBuyQuantity('lim'); // To buy item limit

*}
{$IFNDEF CODEINSIGHT}
procedure TRSGrandExchange.__enterBuyQuantity(quantity: string);
var
  i: integer;
  strArr : TStringArray;
  inputBox: TBoxArray;
  amountBox: TBoxArray := grid(5, 1, 34, 24, 45, 0, point(self.x1 + 60, self.y1 + 298));
begin
  if quantity = '-1' then
    exit();
  // If we don't want to press any button (ie sell all noted items) enter -1

  strArr := ['1', '10', '100', 'all', 'lim'];

  i := strArr.returnInArray(lowercase(quantity));

  if inRange(i, 0, 4) then
    mouseBox(amountBox[i], MOUSE_LEFT)
  else
  begin
    inputBox := self.__getInputBoxes();
    mouseBox(inputBox[0], MOUSE_LEFT);
    if self.__findInsertionCursor(inputBox[0]) then
    begin
      wait(randomRange(150,250));
      typeSend(toStr(quantity), true);
      wait(randomRange(1250, 1500));
    end;
  end;
end;
{$ENDIF}

{*
__enterSellQuantity
---------------

.. code-block:: pascal

    procedure TRSGrandExchange.__enterSellQuantity(quantity: string);

Returns true if it successfully enters the desired item quantity **quantity**
into the input box.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2020 by 3Garrett3

Example:

.. code-block:: pascal

    grandExchange.__enterSellQuantity('1500'); // To sell 1500 of an item
    grandExchange.__enterSellQuantity('all'); // To sell all items

*}
{$IFNDEF CODEINSIGHT}
procedure TRSGrandExchange.__enterSellQuantity(quantity: string);
var
  i: integer;
  strArr : TStringArray;
  inputBox: TBoxArray;
  amountBox: TBoxArray := grid(4, 1, 34, 24, 44, 0, point(self.x1 + 84, self.y1 + 298));
begin
  if quantity = '-1' then
    exit();
  // If we don't want to press any button (ie sell all noted items) enter -1

  strArr := ['1', '10', '100', 'all'];

  i := strArr.returnInArray(lowercase(quantity));

  if inRange(i, 0, 3) then
    mouseBox(amountBox[i], MOUSE_LEFT)
  else
  begin
    inputBox := self.__getInputBoxes();
    mouseBox(inputBox[0], MOUSE_LEFT);
    if self.__findInsertionCursor(inputBox[0]) then
    begin
      wait(randomRange(150,250));
      typeSend(toStr(quantity), true);
      wait(randomRange(1250, 1500));
    end;
  end;
end;
{$ENDIF}

{*
__enterPrice
------------

.. code-block:: pascal

    procedure TRSGrandExchange.__enterPrice(price: string);

Returns true if it successfully enters the desired item price **price**
into the input box.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    grandExchange.__enterPrice('+5');    // Will click the +5% button
    grandExchange.__enterPrice('mid');   // Will leave at mid price
    grandExchange.__enterPrice('32500'); // Will type in 32500

*}
{$IFNDEF CODEINSIGHT}
procedure TRSGrandExchange.__enterPrice(price: string);
var
  i, x, clicks, remainder, modifier: integer;
  b: TBox;
  strArr, clickArr : TStringArray;
  priceBox, inputBox: TBoxArray;
begin
  priceBox := grid(5, 1, 34, 24, 45, 0, point(self.x1 + 322, self.y1 + 298));

  if (price[1] = '+') or (price[1] = '-') then // This block calculates if we can click multiple buttons to achieve the price
  begin
    modifier := strtoInt(copy(price, 2, length(price)));
    if modifier mod 5 <> 0 then
    begin
      print('tRSGrandExchange.__enterPrice(): When using +/- you must specify a multiple of 5, instead you passed ' + price, tDebug.ERROR);
      exit();
    end;

    while (modifier > 0) do
    begin
      if (modifier >= 20) then
      begin
        clickArr.append(price[1] + '20');
        modifier -= 20;
      end else
      if (modifier >= 5) then
      begin
        clickArr.append(price[1] + '5');
        modifier -= 5;
      end;
    end;
    print('tRSGrandExchange.__enterPrice(): Going to click ' + toStr(clickArr), tDebug.SUB);
  end else clickArr.append(price);

  strArr := ['-20', '-5', 'mid', '+5', '+20'];

  for x := 0 to high(clickArr) do
  begin
    i := strArr.returnInArray(lowercase(clickArr[x]));

    if (i = 0) or (i = 1) or (i = 3) or (i = 4) then
    begin
      mouseBox(priceBox[i], MOUSE_LEFT);
      wait(randomRange(150,250));
    end
    else if (i <> 2) then  // Don't click mid button as it's set by default
    begin
      inputBox := self.__getInputBoxes();
      mouseBox(inputBox[1], MOUSE_LEFT);
      if self.__findInsertionCursor(inputBox[1]) then
      begin
        wait(randomRange(150,250));
        typeSend(toStr(price), true);
        wait(randomRange(1250, 1500));
      end;
    end;
  end;
end;
{$ENDIF}

{*
__enterName
-----------

.. code-block:: pascal

    procedure TRSGrandExchange.__enterName(itemName: string)

Returns true if it successfully types the item name **itemName** into the search
box and clicks it.

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

    grandExchange.__enterName('Swamp toad');

*}
{$IFNDEF CODEINSIGHT}
function TRSGrandExchange.__enterName(itemName: string): boolean;
const
  TESS_THRESHOLD_GE_CHARS: Integer = 20;
  TESS_THRESHOLD_GE_CHARS_BACKUP: Integer = 40;
var
  i, beforeBMP, afterBMP, textIndex, tries, w, h : integer;
  timeOut: UInt64;
  itemBox : TBox := [self.x1 + 81, self.y1 + 170, self.x2 - 647, self.y2 - 347]; // The box for the item icon
  resultsBox: TBoxArray := grid(3, 4, 160, 49, 168, 55, point(self.x1+104, self.y1 + 285)); // Updated box locations
  resultsTextBox: TBoxArray := grid(3, 4, 119, 38, 168, 55, point(self.x1 + 121, self.y1 + 285)); // Updated box locations
  inputBox: TBoxArray;
  tempText, TESS_WHITELIST: String;
  tNameArr, tNameArr2 : TStringArray;
  textCol : integer := 7891274;
  textTol : integer := 17;
  textCTS : tColorSettings := [2, [0.02, 0.44]];
  textTPA : tPointArray;
  textBox, tempBox, safeBox : tBox;
  bestMatch : Extended;
begin
  tempBox := self.getBounds();
  tempBox.edit(10,20,-10,-10);
  while getPixelShift(tempBox, 100) > 100 do  // Cursor flashing is ~50 otherwise the slot should not change
    wait(50);                                          // There is a fancy loading animation where the search box slides up before the slot is ready

  wait(randomRange(300,600));

  timeOut := getTickCount() + 3000;
  while length(inputBox) = 0 do
  begin
    if getTickCount() > timeOut then exit(False);
    inputBox := self.__getInputBoxes();
  end;

  if not self.__findInsertionCursor(inputBox[0]) then
  begin
    mouseBox(inputBox[0], MOUSE_LEFT);
    wait(randomRange(125,250));
  end;

  if self.__findInsertionCursor(inputBox[0]) then
    typeSend(itemName, false);

  if waitColorCountRange(8286291, 14, colorSetting(2, 0.03, 0.36), resultsTextBox[0], random(5000,8000), 10) then
  begin // Updated colors
    for tries := 0 to 1 do
    begin
      for i := 0 to high(resultsTextBox) do
      // Removing or containsMatch(tesseractGetText(resultsTextBox[i], TESS_FILTER_GE_CHARS), itemName, false,  0.75)
      // Returns false positives (ie big bones are true when the text is bones)
      // Here we generate an array with all possible results. Then we will sort for the best match
      begin
        findColorsTolerance(textTPA, textCol, resultsTextBox[i], textTol, textCTS);
        if length(textTPA) = 0 then break(); // We've reached the end of results

        textBox := textTPA.getBounds();
        textBox.edit(-4, -4, 3, 3); // Tesseract works better with some empty space around text

        // Create a custom whitelist of letters, any numbers that are in the name, and any special chars like (/,)
        TESS_WHITELIST := STR_LETTERS + extractFromStr(itemName, numbers) + replace(extractFromStr(itemName, others), ' ', '', [rfReplaceAll]);
        tesseractOCR.setWhitelist(TESS_WHITELIST);
        // Two tesseract filters are required, sometimes one works better than the other
        tempText := tesseractOCR.Recognize(textBox, TESS_THRESHOLD_GE_CHARS);
        tempText := replace(tempText, chr(10), " ", [rfReplaceAll]);
        tempText := replace(tempText, chr(13), " ", [rfReplaceAll]);

        tNameArr.append(tempText);

        tempText := tesseractOCR.Recognize(textBox, TESS_THRESHOLD_GE_CHARS_BACKUP);
        tempText := replace(tempText, chr(10), " ", [rfReplaceAll]);
        tempText := replace(tempText, chr(13), " ", [rfReplaceAll]);

        tNameArr2.append(tempText);
        tesseractOCR.setWhitelist(STR_EVERYTHING);

        print('TRSGrandExchange.__enterName(): At result '+ toStr(i) + ': ' + tNameArr[i] + ' / ' + tNameArr2[i], TDebug.DEBUG);
      end;

      for i := 0 to high(tNameArr) do
        if max(stringMatch(lowerCase(tNameArr[i]), lowerCase(itemName)), stringMatch(lowerCase(tNameArr2[i]), lowerCase(itemName))) > bestMatch then
        begin
          textIndex := i;
          bestMatch := max(stringMatch(lowerCase(tNameArr[i]), lowerCase(itemName)), stringMatch(lowerCase(tNameArr2[i]), lowerCase(itemName)));
        end;

      if bestMatch >= 0.75 then break();

      if length(inputBox) = 0 then inputBox := self.__getInputBoxes();
      getClientDimensions(w,h);
      safeBox := intToBox(self.x2,0,w-1,h-1);
      mouseBox(safeBox, MOUSE_MOVE);
      tNameArr := [];
      tNameArr2 := [];
    end;

    if bestMatch < 0.75 then exit(False);
    beforeBMP := bitmapFromClient(itemBox);
    setBitmapName(beforeBMP, 'beforeBMP'); // Takes a screenshot of the item icon (empty)

    // Now click the box
    mouseBox(resultsBox[textIndex], MOUSE_LEFT);

    afterBMP := bitmapFromClient(itemBox);  // This is re-calculated to check for when the icon appears
    setBitmapName(afterBMP, 'afterBMP');

    timeOut := GetTickCount() + randomRange(3000, 4000);
    while calculatePixelShift(beforeBMP, afterBMP, intToBox(0, 0, itemBox.getWidth()-1, itemBox.getHeight()-1)) = 0 do // Waits for the icon to show up in the slot
    begin
      if getTickCount() > timeOut then
      begin
        print('TRSGrandExchange.__enterName(): No item appeared after clicking result.', tDebug.ERROR);
        freeBitmap(beforeBMP);
        freeBitmap(afterBMP);
        exit(false);
      end;

      wait(randomRange(100,250));
      freeBitmap(afterBMP);
      afterBMP := bitmapFromClient(itemBox);
      setBitmapName(afterBMP, 'afterBMP');
    end;

    // If we didn't timeout above we're now successfully ready for price and quantity updates
    while getPixelShift(tempBox, 100) > 100 do  // Cursor flashing is ~50 otherwise the slot should not change
      wait(50);                                          // There is another animation where the search box slides down to reveal the price/quantity

    print('TRSGrandExchange.__enterName(): Clicked name successfully.');
    freeBitmap(beforeBMP);
    freeBitmap(afterBMP);
    wait(randomRange(600,1000)); // Slight lag on the price/quantity boxes being ready
    if length(self.__getInputBoxes()) < 3 then
    begin
      print('TRSGrandExchange.__enterName(): Both input boxes not visible yet, waiting');

      timeOut := GetTickCount() + randomRange(3000, 4000);
      while length(self.__getInputBoxes()) < 3 do
      begin
        wait(50);
        if getTickCount() > timeOut then
        begin
          print('TRSGrandExchange.__enterName(): Timed out with not enough input boxes.', tDebug.ERROR);
          exit(false);
        end;
      end;
    end;
    exit(true);
  end;

  print('TRSGrandExchange.__enterName(): Found no matches for item: ' + itemName, TDebug.SUB);
end;
{$ENDIF}

{*
__returnToSummary
-----------------

.. code-block:: pascal

    procedure TRSGrandExchange._returnToSummary();

If the GE offer screen or GE progress screen is currently open, it will click
the back arrow to return to the summary screen.

.. note::

    - by The Mayor
    - Last Updated: 25 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    grandExchange.__returnToSummary();

*}
{$IFNDEF CODEINSIGHT}
procedure TRSGrandExchange.__returnToSummary(useHotkey : Boolean = False);
var
  backButton: TPoint := [self.x1 + 33, self.y1 + 515];
  timeOut: UInt64;
begin
  timeOut := GetTickCount() + randomRange(3500, 5500);
  if (self.__isOfferOpen() or self.__isProgressOpen()) then
  begin
    print('TRSGrandExchange._returnToSummary(): returning to summary screen', TDebug.SUB);

    if not useHotkey then
      mouse(backButton.rand(5), MOUSE_LEFT)
    else
      typeByte(VK_ESCAPE); // Added escape hotkey

    print('TRSGrandExchange._returnToSummary(): Clicked to return, waiting for main screen to load', TDebug.SUB);
    wait(randomRange(1000, 1500));

    while (self.__isOfferOpen() or self.__isProgressOpen()) do
    begin
      if GetTickCount() > timeout then
      begin
        print('TRSGrandExchange._returnToSummary(): Timed out trying to return to main', TDebug.WARNING);
        exit();
      end;

      mouseBox(self.getBounds(), MOUSE_MOVE);
      wait(randomRange(300,600)); // To move the mouse away from the button (if we barely misclicked)

      mouse(backButton.rand(5), MOUSE_LEFT);
      wait(randomRange(1000, 1500));
    end;
  end;
end;
{$ENDIF}

{*
countFreeSlots
--------------

.. code-block:: pascal

    function TRSGrandExchange.countFreeSlots(): integer;

Returns the amount of free (empty) slots in the GE interface.

.. note::

    - by Thomas
    - Last Updated: 11 October 2016 by Thomas

Example:

.. code-block:: pascal

    if (grandExchange.countFreeSlots() > 2) then
      sellItems();

*}

function TRSGrandExchange.countFreeSlots(): integer;
var
  i: integer;
  TBA: TBoxArray := self.__getSlotBoxes();
begin
  for i := 1 to length(TBA) do
    if self.__isSlotEmpty(i) then
      inc(result);

  print('TRSGrandExchange.countFreeSlots(): Counted ' + toStr(result), TDebug.DEBUG);
end;

{*
countActiveSlots
--------------

.. code-block:: pascal

    function TRSGrandExchange.countActiveSlots(): integer;

Returns the amount of active slots for trades. F2P gets 3 slots, member get 8.
Can be used to determine that slots are visible.

.. note::

    - by 3Garrett3
    - Last Updated: 20 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    if (grandExchange.countActiveSlots() > 0) then
      grandExchange.countFreeSlots();

*}

function TRSGrandExchange.countActiveSlots(): integer;
var
  i: integer;
  TBA: TBoxArray := self.__getSlotBoxes();
begin
  for i := 1 to length(TBA) do
    if self.__isSlotActive(i) then
      inc(result);

  print('TRSGrandExchange.countActiveSlots(): Counted ' + toStr(result), TDebug.DEBUG);
end;

(*
__openSlot
-----------

.. code-block:: pascal

    function TRSGrandExchange.openSlot(geSlot: integer): boolean;

Returns true if it opens a slot. Works for in progress, completed, or aborted slots.

.. note::

    - by 3Garrett3
    - Last Updated: 20 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    if grandExchange.__openSlot(2) then
      // Continue collecting, aborting, etc;

*)
function TRSGrandExchange.__openSlot(geSlot: integer; useHotkey : boolean = False): boolean;
var
  TBA: TBoxArray := self.__getSlotBoxes();
  timeOut: UInt64;
  i: integer;
begin
  self.__returnToSummary(useHotkey);

  if (not self.__isSlotActive(geSlot)) or self.__isSlotEmpty(geSlot) then
  begin
    print('TRSGrandExchange.__openSlot(): Cannot open as offer slot ' + toStr(geSlot) + ' is empty', TDebug.ERROR);
    exit(false);
  end;

  timeOut := GetTickCount() + randomRange(3000, 4000);

  repeat
    case useHotkey of
      True: SendKeys(toStr(geSlot), 175, 50);
      False: mouseBox(TBA[geSlot - 1], MOUSE_LEFT);
    end;
    if self.__isProgressOpen(2000 + random(500)) then
    begin
      result := True;
      break();
    end else
      if useHotkey then useHotKey := False; // Set it false if it failed once
  until (GetTickCount() < timeOut);

  print('TRSGrandExchange.__openSlot(): Slot ' + toStr(geSlot) + ' = ' + boolToStr(result));
end;

function TRSGrandExchange.isOfferComplete() : Boolean; // Checks for completion bar on open offer
var
  progressBar: TBox := [self.x1 + 29, self.y1 + 394, self.x1 + 423, self.y1 + 400];
begin
  result := (countColorTolerance(1999423, progressBar, 17) > 1450);
  print('TRSGrandExchange.isOfferComplete(): ' + boolToStr(result), TDebug.SUB);
end;

(*
collectSlot
-----------

.. code-block:: pascal

    function TRSGrandExchange.collectSlot(geSlot: integer; useHotkey : boolean = False): boolean;

Returns true if it collects coins and/or items from the completed or aborted slot
**geSlot** . Optional hotkey usage.

.. note::

    - by The Mayor
    - Last Updated: 20 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    grandExchange.collectSlot(2);

*)
function TRSGrandExchange.collectSlot(geSlot: integer; useHotkey : boolean = False; noted : boolean = False): boolean;  // Added useHotkey
var
  TBA: TBoxArray := self.__getSlotBoxes();
  collectBox: TBoxArray := grid(2, 1, 37, 32, 49, 0, point(self.x1 + 463, self.y1 + 385));
  timeOut: UInt64;
  i : integer;
  gotNoted : Boolean;
begin
  print('TRSGrandExchange.collectSlot(): Beginning collection', TDebug.HEADER);
  if not self.__isProgressOpen() then
  begin
    self.__returnToSummary(useHotkey);

    if not self.__openSlot(geSlot, useHotkey) then // Put common code into openSlot function
    begin
      print('TRSGrandExchange.collectSlot(): Cannot collect as opening slot ' + toStr(geSlot) + ' failed', TDebug.ERROR);
      exit(false);
    end;
  end;

  for i := high(collectBox) downto 0 do
    for 0 to 4 do // Attempt up to 5 times in case of lag
      if isItemIn(collectBox[i]) then
      begin
        case (noted and (not gotNoted)) of
          True:
            begin
              mouseBox(collectbox[i], MOUSE_RIGHT);
              if chooseOption.isOpen(1500) then
                if chooseOption.optionsExist(['note', 'Collect-note', 'ect-no', '-not']) then
                  gotNoted := chooseOption.select(['note', 'Collect-note', 'ect-no', '-not'])
                else
                  gotNoted := chooseOption.select(['Collect ', 'lect', 'ollec'])
                  // This is if the item is non-notable
            end;
          False: mouseBox(collectBox[i], MOUSE_LEFT);
        end;

        // Wait for the item to go away
        timeOut := getTickCount() + 1500;
        while (getPixelShift(collectBox[i], 350) > 10) or isItemIn(collectBox[i]) do
        begin
          if not self.__isProgressOpen() then
          begin
            result := true;
            break(2);
          end;

          wait(100);
          if getTickCount() > timeout then break(2);
        end;
      end;

  self.__returnToSummary(useHotkey);

  print('TRSGrandExchange.collectSlot(): Slot ' + toStr(geSlot) + ' = ' + boolToStr(result));
end;

(*
waitSlotComplete
---------------

.. code-block:: pascal

    function TRSGrandExchange.waitSlotComplete(geSlot, maxTime: integer): boolean;

Returns true if the slot is complete during the wait time.

.. note::

    - by 3Garrett3
    - Last Updated: 4 June 2020 by 3Garrett3

Example:

.. code-block:: pascal

    grandExchange.waitSlotComplete(2, 60000); // Wait up to 1 minute for slot 2 to complete

*)
function TRSGrandExchange.waitSlotComplete(geSlot, maxTime: Integer): boolean;
var
  TBA: TBoxArray := self.__getSlotBoxes();
  timeOut: UInt64;
begin
  self.__returnToSummary();

  if (not self.__isSlotActive(geSlot)) or self.__isSlotEmpty(geSlot) then
  begin
    print('TRSGrandExchange.waitCollectSlot(): Cannot collect as offer slot ' + toStr(geSlot) + ' is empty', TDebug.ERROR);
    exit(false);
  end;

  timeOut := GetTickCount() + maxTime;

  while (GetTickCount() < timeOut) do
    if self.__isSlotComplete(geSlot) then
    begin
      print('TRSGrandExchange.waitCollectSlot(): Slot is complete', TDebug.SUB);
      exit(true)
    end else
      wait(randomRange(250,500));

      // If we get here, the slot has not completed
  print('TRSGrandExchange.waitCollectSlot(): Slot is not complete', TDebug.SUB);
end;

(*
waitCollectSlot
---------------

.. code-block:: pascal

    function TRSGrandExchange.waitCollectSlot(geSlot, maxTime: integer): boolean;

Returns true if it collects coins and/or items from the completed or aborted slot
**geSlot** . Waits up to **maxTime** for **geSlot** to finish selling.

.. note::

    - by The Mayor
    - Last Updated: 4 June 2020 by 3Garrett3

Example:

.. code-block:: pascal

    grandExchange.waitCollectSlot(2, 60000); // Wait up to 1 minute to collect slot 2

*)
function TRSGrandExchange.waitCollectSlot(geSlot, maxTime: Integer): boolean;
var
  TBA: TBoxArray := self.__getSlotBoxes();
  timeOut: UInt64;
begin
  if self.waitSlotComplete(geSlot, maxTime) then
    if self.collectSlot(geSlot) then
      exit(true)
  else
    print('TRSGrandExchange.waitCollectSlot(): Slot did not complete', TDebug.WARNING);
end;

(*
collectAllSlots
---------------

.. code-block:: pascal

    procedure TRSGrandExchange.collectAllSlots(toInventory: boolean = true): boolean;

Collects all coins and items to either the inventory or the bank depending on the
**toInventory** paramter *(default = true)* via the collect buttons.

.. note::

    - by The Mayor
    - Last Updated: 27 July 2015 by Clarity

Example:

.. code-block:: pascal

    grandExchange.collectAllSlots(false); // Collect all to bank

*)
procedure TRSGrandExchange.collectAllSlots(toInventory: boolean = true);
const
  _OFFSET: TPoint = [653, 483];
var
  TBA: TBoxArray;
begin
  TBA := grid(1, 2, 180, 24, 0, 34, point(self.x1 + _OFFSET.x, self.y1 + _OFFSET.y));
  case ToInventory of
    true: mouseBox(TBA[0], MOUSE_LEFT);
    false: mouseBox(TBA[1], MOUSE_LEFT);
  end;
end;

(*
__clickAbort
-----------

.. code-block:: pascal

    function TRSGrandExchange.__clickAbort(): boolean;

Used internally to click on the abort X in the slot. Returns true if it finds the red bar

.. note::

    - by 3Garrett3
    - Last Updated: 4 June 2020 by 3Garrett3

Example:

.. code-block:: pascal

    if grandExchange.__clickAbort() then
      // Do whatever with the aborted offer

*)

function TRSGrandExchange.__clickAbort(geSlot : Integer = 0; onMS : Boolean = False) : boolean;
var
  abortButton: TPoint;
  redBox: TBox;
  minRange : Integer;
  t : Int64;
begin
  t := getTickCount() + 6000;
  while getTickCount() < t do
  begin
    if onMS then
    begin
      abortButton := self.__getAbortBoxes()[geSlot-1].getGaussPoint();
      redBox := self.__getSlotBoxes()[geSlot-1];
      redBox.edit(8, 93, -8, -16);
      minRange := 750;
    end else
    begin
      abortButton := [self.x1 + 412, self.y1 + 373];   // On an open offer
      redbox := [self.x1 + 29, self.y1 + 394, self.x1 + 423, self.y1 + 400];
      minRange := 1000;
    end;

    mouse(abortButton.rand(3), MOUSE_LEFT);
    result := waitColorCountRange(1048714, 5, redBox, 2000, minRange);
    if result then break else self.__returnToSummary();
  end;
end;

(*
quickAbort
-----------

.. code-block:: pascal

    function TRSGrandExchange.quickAbort(collect : boolean = false; return : boolean = false; useHotkey : boolean = false) : boolean;

Aborts the offer when we are already in the offer screen. Note that only collect or return can be true.
Collect overrides return.

.. note::

    - by 3Garrett3
    - Last Updated: 4 June 2020 by 3Garrett3

Example:

.. code-block:: pascal

    if grandExchange.quickAbort(true, false, true) then
      // input a new offer

*)

function TRSGrandExchange.quickAbort(collect : boolean = false; return : boolean = false; useHotkey : boolean = false) : boolean;
begin
  if not self.isOpen() then
  begin
    print('TRSGrandExchange.quickAbort(): Cannot abort as the GE is not open', TDebug.ERROR);
    exit(false);
  end;

  if not self.__isProgressOpen() then
  begin
    print('TRSGrandExchange.quickAbort(): Cannot quick abort because progress screen is not open. Use regulat abortSlot()', TDebug.ERROR);
    exit(false);
  end;

  if not self.__clickAbort() then
  begin
    print('TRSGrandExchange.quickAbort(): Clicking abort failed', TDebug.ERROR);
    exit(false);
  end;

  if collect then
    result := self.collectSlot(0, useHotkey) // use 0 as the slot because it is already open
  else if return then
  begin
    self.__returnToSummary(useHotKey);
    result := (not self.__isProgressOpen());
  end else
    result := true;
    // If we clicked the abort button above, then we're done if we aren't collecting or returning to main screen
end;

(*
abortSlot
---------

.. code-block:: pascal

    function TRSGrandExchange.abortSlot(geSlot: integer; collect: boolean = true): boolean;

Returns true if it aborts the slot **geSlot**. If the **collect** parameter is
set to true it will also collect the items and gold from the aborted offer.

.. note::

    - by The Mayor
    - Last Updated: 4 June 2020 by 3Garrett3

Example:

.. code-block:: pascal

    grandExchange.abortSlot(2);
    grandExchange.abortSlot(2, false); // To leave items in the aborted offer slot

*)
function TRSGrandExchange.abortSlot(geSlot: integer; collect: boolean = true; useHotkey : boolean = false; fromMS : Boolean = True): boolean;
var
  TBA: TBoxArray := self.__getSlotBoxes();
begin
  if not self.isOpen() then
  begin
    print('TRSGrandExchange.abortSlot(): Cannot abort as the GE is not open', TDebug.ERROR);
    exit(false);
  end;

  self.__returnToSummary(useHotkey);

  if self.__isSlotEmpty(geSlot) or (not self.__isSlotActive(geSlot)) then
  begin
    print('TRSGrandExchange.abortSlot(): Cannot abort as offer slot ' + toStr(geSlot) + ' is empty', TDebug.ERROR);
    exit(false);
  end;

  if self.__isSlotAborted(geSlot) then
  begin
    print('TRSGrandExchange.abortSlot(): Offer slot ' + toStr(geSlot) + ' is already aborted');
    exit(true);
  end;

  if self.__isSlotComplete(geSlot) then
  begin
    print('TRSGrandExchange.abortSlot(): Cannot abort as offer slot ' + toStr(geSlot) + ' is already completed', TDebug.ERROR);
    exit(false);
  end;

  if (not fromMS) and (not self.__openSlot(geSlot, useHotkey)) then   // Added opening function
  begin

    print('TRSGrandExchange.abortSlot(): Cannot abort as offer slot ' + toStr(geSlot) + ' couldnt be opened', TDebug.ERROR);
    exit(false);
  end else
  begin

    if (not fromMS) and self.isOfferComplete() then
    begin
      print('TRSGrandExchange.abortSlot(): Offer has completed');
      exit(false);
    end;

    if not self.__clickAbort(geSlot, fromMS) then
    begin
      print('TRSGrandExchange.abortSlot(): Clicking abort button failed', TDebug.ERROR);
      exit(false);
    end;

    wait(randomRange(550,800));

    if collect then
      result := self.collectSlot(geSlot, useHotkey)
    else
    begin
      self.__returnToSummary(useHotkey);
      result := self.__isSlotAborted(geSlot);
    end;
  end;

  print('TRSGrandExchange.abortSlot(): Slot ' + toStr(geSlot) + ' = ' + boolToStr(result));
end;

(*
abortAllSlots
-------------

.. code-block:: pascal

    procedure TRSGrandExchange.abortAllSlots(collect: boolean);

Aborts all slots that are not currently empty. If the **collect** parameter is
set to true, it will also collect all items and gold.

.. note::

    - by The Mayor
    - Last Updated: 12 March 2015 by The Mayor

Example:

.. code-block:: pascal

    grandExchange.abortAllSlots();

*)
procedure TRSGrandExchange.abortAllSlots(collect: boolean = true);
var
  i: integer;
  TIA: TIntegerArray;
  TBA: TBoxArray := self.__getSlotBoxes();
begin
  setlength(TIA, length(TBA));

  for i := 1 to length(TBA) do
    TIA[i] := i;
  TIA.shuffle();
  //writeLn(TIA);
  for i := 1 to length(TBA) do
    if (not self.__isSlotEmpty(TIA[i])) and self.__isSlotActive(TIA[i]) then
      self.abortSlot(TIA[i], collect);
end;

(*
getPercentDone
--------------

.. code-block:: pascal

    function TRSGrandExchange._getProgressCount(geSlot: integer): integer;

Used internally for getting percentage completion.

.. note::

    - by turpinator
    - Last Updated: 25 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    percentDone := grandExchange.__getProgressCount(1) * 0.6462;

*)
function TRSGrandExchange.__getProgressCount(geSlot: integer): integer;
const
  BG_COLORS = [2500653, 1974051, 2565929, 2039584, 3092529, 2434598, 3026997];
var
  i, x, y, w, h, hoverCount: integer;
  TBA: TBoxArray := self.__getSlotBoxes();
begin
  if self.__isSlotEmpty(geSlot) or (not self.__isSlotActive(geSlot)) then exit(-1);

  x := TBA[geSlot -1].x1 + 8;
  y := TBA[geSlot -1].y1 + 93;
  hoverCount := countColorTolerance(855309, intToBox(x+1, y, x+152, y+2), 6, colorSetting(2, 0.01, 0.01));

  if hoverCount > 0 then // We are hovering and obscuring the bar
  begin
    print('tRSGrandExchange.__getProgressCount(): hoverCount = ' + toStr(hoverCount));
    getClientDimensions(w,h);
    mouseBox(intToBox(self.x2, 0, w-1, h-1), MOUSE_MOVE);
    wait(randomRange(100,200));
  end;

  for result := 0 to 153 do
    for i := 0 to high(BG_COLORS) do
      if (getColor(x + result, y) = BG_COLORS[i]) then
        break(2);
end;

(*
getPercentDone
--------------

.. code-block:: pascal

    function TRSGrandExchange.getPercentDone(geSlot: integer): integer;

Returns the percentage toward completion for the offer in **geSlot** .

.. note::

    - by turpinator
    - Last Updated: 25 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    var
      per: Integer;
    begin
      per := grandExchange.getPercentDone(2);
      writeLn('Slot 2 is ' + toStr(per) + ' percent complete!');
    end;

*)
function TRSGrandExchange.getPercentDone(geSlot: integer): integer;
begin
  result := round(100 * (1/154) * self.__getProgressCount(geSlot)); // Moved counting to separate function
end;

(*
getPercentDone
--------------

.. code-block:: pascal

    function TRSGrandExchange.getPercentDone(geSlot: integer): Extended;

Returns the percentage toward completion for the offer in **geSlot**. Returns
decimal value.

.. note::

    - by turpinator
    - Last Updated: 25 May 2020 by 3Garrett3

Example:

.. code-block:: pascal

    var
      per: Extended;
    begin
      per := grandExchange.getPercentDone(2);
      writeLn('Slot 2 is ' + toStr(per*100) + ' percent complete!');
    end;

*)


function TRSGrandExchange.getPercentDone(geSlot: integer): Extended; overload;
begin
  result := (1/154) * self.__getProgressCount(geSlot);
end;

function tRSGrandExchange.__isWarning() : Boolean;
var
  dismiss : tPointArray;
  atpa : t2DPointArray;
  mainBox, geBox : tBox;
  timeout : Int64;
  i : Integer;
begin
  mainBox := intToBox(self.x1, self.y1, self.x1 + 548, self.y1 + 535);
  findColorsTolerance(dismiss, 14983438, mainBox, 23, colorSetting(2, 0.08, 0.43));

  if length(dismiss) > 1000 then
  begin
    atpa := dismiss.toATPA(100, 23);

    atpa.sortFromMidPoint(self.getBounds().getMiddle());

    for i := 0 to high(atpa) do
    begin
      if atpa[i].getBounds().getWidth() < 50 then continue();

      geBox := self.getBounds();
      geBox.edit(10, 10, -5, -5);

      mouseBox(atpa[i].getBounds(), MOUSE_LEFT);
      wait(randomRange(600, 1200));

      timeout := getSystemTime() + 5000;
      while getPixelShift(geBox, 150) > 50 do
      begin
        if getSystemTime() > timeout then exit();

        mouseBox(atpa[i].getBounds(), MOUSE_LEFT);
        wait(randomRange(600, 1200));
      end;

      result := True;
      exit();
    end;
  end;
end;

(*
sellItem
--------

.. code-block:: pascal

    function TRSGrandExchange.sellItem(packSlot: integer; price, quantity: string; waitCollect: boolean = false; waitTime: integer = 10000): boolean;

Returns true if it sells the item in backpack slot **packSlot** . If **waitCollect**
is set to true, it will wait the specified waitTime for the offer to complete
before collecting the resulting gold.

  The **price** parameter is a string - valid options are:

    * 'mid'             : GE mid price button
    * '-5'              : 5% below mid price button
    * '+5'              : 5% above mid price button
    * Any other number  : It will enter the price

  The **quantity** parameter is a string - valid options are:

    * '-1'              : Presses no button (which sells all noted items)
    * '1'               : '1' button
    * '10'              : '10' button
    * '100'             : '100' button
    * 'all'             : 'All' button (Selling ONLY)
    * Any other number  : It will enter the quantity

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

      // Sell all of item in backPack slot 1 for mid price
    grandExchange.sellItem(1, 'mid', 'all');

      // To sell 100 of the item in backPack slot 1, for 1500gp each
    grandExchange.sellItem(1, '1500', '100');

      // As above, but waits up to 20 seconds for completion before collecting the coins
    grandExchange.sellItem(1, '1500', '100', true, 20000);

*)
function TRSGrandExchange.sellItem(packSlot: integer; price, quantity: string; waitCollect: boolean = false; waitTime: integer = 10000; slotNumber : Integer = -1): boolean;
var
  i, nextSlot, tries, x, y, hoverCount, timeout: integer;
  packBox : tBox;
  confirm: TBox := [self.x1 + 218, self.y1 + 508, self.x1 + 345, self.y1 + 526];
  offerBox : TBox := [self.x1 + 18, self.y1 + 141, self.x1 + 548, self.y1 + 535]; // The main offer screen
  hoverBox : TBox := [self.x1 + 18, self.y1 + 141, self.x1 + 482, self.y1 + 535]; // The area we don't want covered by hover text
begin
  if not self.isOpen() then
  begin
    print('TRSGrandExchange.sellItem(): Cannot abort as the GE is not open', TDebug.ERROR);
    exit(false);
  end;

  self.__returnToSummary();

  if slotNumber = -1 then
  begin
    print('TRSGrandExchange.sellItem(): Detecting next open slot number', TDebug.SUB);
    for i := 1 to 8 do
      if self.__isSlotEmpty(i) and self.__isSlotActive(i) then
      begin
        nextSlot := i;
        print('TRSGrandExchange.sellItem(): Creating an offer in slot number ' + toStr(nextSlot), TDebug.SUB);
        break();
      end;

    if nextSlot < 1 then
    begin
      print('TRSGrandExchange.buyItem(): Cannot buy item as there are no empty offer slots', TDebug.ERROR);
      exit(false);
    end;
  end;

  while (tries < 4) do
  begin
    packBox := self.getPackSlotBox(packSlot);
    if isItemIn(packBox) then
    begin
      getMousePos(x,y);
      if pointInBox(point(x,y), packBox) then
        mouse(point(x,y), MOUSE_LEFT)
      else
        mouseBox(packBox, MOUSE_LEFT);
    end else
    begin
      print('TRSGrandExchange.sellItem(): No item in pack slot: ' + intToStr(packSlot), TDebug.ERROR);
      exit(false);
    end;

    hoverCount := countColorTolerance(855309, hoverBox, 6, colorSetting(2, 0.01, 0.01));

    if hoverCount > 4500 then // We are hovering and obscuring the offer
    begin                     // Depending on items in the offer (black outline increases count)
                              // The normal count is approximately 4450
      print('tRSGrandExchange.sellItem(): hoverCount = ' + toStr(hoverCount));
      mouseBox(hoverBox, MOUSE_MOVE);
      wait(randomRange(100,200));
    end;

    if self.__isOfferOpen(3000) then break();
    tries += 1;
  end;

  if tries >= 3 then
  begin
    print('TRSGrandExchange.sellItem(): Could not open offer by clicking packslot ' + intToStr(packSlot), TDebug.ERROR);
    exit(false);
  end;

  if self.__isOfferOpen(3000) then
  begin
    hoverCount := countColorTolerance(855309, hoverBox, 6, colorSetting(2, 0.01, 0.01));

    if hoverCount > 4500 then // We are hovering and obscuring the offer
    begin                     // Depending on items in the offer (black outline increases count)
                              // The normal count is approximately 4450
      print('tRSGrandExchange.sellItem(): hoverCount = ' + toStr(hoverCount));
      mouseBox(hoverBox, MOUSE_MOVE);
      wait(randomRange(400,600));
    end;

    if length(self.__getInputBoxes()) < 2 then
    begin
      print('TRSGrandExchange.sellItem(): Both input boxes not visible yet, waiting');
      while length(self.__getInputBoxes()) < 2 do wait(50);
    end;

    for 0 to 1 do
    begin
      self.__enterSellQuantity(quantity);
      self.__enterPrice(price);

      if waitColorCountRange(2270960, 22, colorSetting(2, 0.11, 0.48), confirm, 4000, 750, 5000) then
      begin
        timeOut := getTickCount() + 2500;
        mouseBox(confirm, MOUSE_LEFT);
        wait(randomRange(1000, 1500));

        result:= self.__isSlotSelling(nextSlot, True);

        while not result do
        begin
          wait(randomRange(500, 800));

          if self.__isWarning() then
          begin
            mouseBox(confirm, MOUSE_LEFT);
            wait(randomRange(1000, 1500));
          end;

          result:= self.__isSlotSelling(nextSlot, True);
          if getTickCount() > timeout then break();
        end;

        if result then break();
      end;
    end;

    wait(randomRange(1000, 1500));
  end;

  result:= self.__isSlotSelling(nextSlot, True);
  print('TRSGrandExchange.sellItem(): ' + boolToStr(result), TDebug.SUB);

  if waitCollect then
    self.waitCollectSlot(nextSlot, waitTime);
end;

(*
buyItem
-------

.. code-block:: pascal

    function TRSGrandExchange.buyItem(itemName, price, quantity: string; waitCollect: boolean = false; waitTime: integer = 10000): boolean;

Returns true if it buys the item **itemName** . If **waitCollect** is set to true,
it will wait the specified waitTime for the offer to complete before collecting
the resulting gold and items.

  The **price** parameter is a string - valid options are:

    * 'mid'             : GE mid price button
    * '-5'              : 5% below mid price button
    * '+5'              : 5% above mid price button
    * '-20'             : 20% below mid price button
    * '+20'             : 20% above mid price button
    * Any multiple      : It will click the above buttons multiple times. +40 will click 20% twice.
    * Any other number  : It will enter the price

  The **quantity** parameter is a string - valid options are:

    * '1'               : '1' button
    * '10'              : '10' button
    * '100'             : '100' button
    * Any other number  : It will enter the quantity

.. note::

    - by The Mayor
    - Last Updated: 7 July 2016 by SlipperyPickle

Example:

.. code-block:: pascal

      // To buy 10000 oak logs at 5% over the mid price
    grandExchange.buyItem('Oak log', '+5', '10000');

      // To buy 10000 oak logs for 150gp each
    grandExchange.buyItem('Oak log', '150', '10000');

      // As above, but waits up to 20 seconds for completion before collecting items
    grandExchange.buyItem('Oak log', '150', '10000', true, 20000);

*)
function TRSGrandExchange.buyItem(itemName, price, quantity: string; waitCollect: boolean = false; waitTime: integer = 10000; slotNumber : Integer = -1): boolean;
var
  i, nextSlot: integer;
  TBA : TBoxArray := self.__getBuyBoxes();
  confirm: TBox := [self.x1 + 218, self.y1 + 508, self.x1 + 345, self.y1 + 526];
begin
  if not self.isOpen() then
  begin
    print('TRSGrandExchange.buyItem(): Cannot buy item as the GE is not open', TDebug.ERROR);
    exit(false);
  end;

  self.__returnToSummary();

  if slotNumber = -1 then
  begin
    print('TRSGrandExchange.buyItem(): Detecting next open slot number', TDebug.SUB);
    for i := 1 to 8 do
      if self.__isSlotEmpty(i) and self.__isSlotActive(i) then
      begin
        nextSlot := i;
        print('TRSGrandExchange.buyItem(): Creating an offer in slot number ' + toStr(nextSlot), TDebug.SUB);
        break();
      end;

    if nextSlot < 1 then
    begin
      print('TRSGrandExchange.buyItem(): Cannot buy item as there are no empty offer slots', TDebug.ERROR);
      exit(false);
    end;
  end else
    nextSlot := slotNumber;

  mouseBox(TBA[nextSlot - 1], MOUSE_LEFT);

  if self.__isOfferOpen(3000) then
    if self.__enterName(itemName) then
    begin

      for 0 to 1 do
      begin
        self.__enterBuyQuantity(quantity);
        self.__enterPrice(price);

        if waitColorCountRange(2270960, 22, colorSetting(2, 0.11, 0.48), confirm, 4000, 750, 5000) then
        begin
          mouseBox(confirm, MOUSE_LEFT);
          wait(randomRange(1000, 1500));
          break();
        end;

      end;
    end else
      self.__returnToSummary();


  result := self.__isSlotBuying(nextSlot, True);
  print('TRSGrandExchange.buyItem(): ' + boolToStr(result), TDebug.SUB);

  if waitCollect then
    self.waitCollectSlot(nextSlot, waitTime);
end;

function TRSGrandExchange.editOffer(price : string; waitCollect: boolean = false; waitTime: integer = 10000; slotNumber : Integer): boolean;
var
  i: integer;
  TBA : TBoxArray := self.__getEditBoxes();
  confirm: TBox := [self.x1 + 218, self.y1 + 508, self.x1 + 345, self.y1 + 526];
begin
  if not self.isOpen() then
  begin
    print('TRSGrandExchange.editOffer(): Cannot edit offer as the GE is not open', TDebug.ERROR);
    exit(false);
  end;

  self.__returnToSummary();

  if self.__isSlotEmpty(slotNumber) then
  begin
    print('TRSGrandExchange.editOffer(): Cannot edit because the slot is empty');
    exit(false);
  end;

  if self.__isSlotComplete(slotNumber) or self.__isSlotAborted(slotNumber) then
  begin
    print('TRSGrandExchange.editOffer(): Cannot edit because the slot is not in progress');
    exit(false);
  end;

  mouseBox(TBA[slotNumber - 1], MOUSE_LEFT);

  if self.__isOfferOpen(5000) then
  begin // This operation is very laggy on the GE side
    self.__enterPrice(price);
    wait(randomRange(1000, 1500));
    if waitColorCountRange(2270960, 22, colorSetting(2, 0.11, 0.48), confirm, 3000, 1000, 5000) then
      mouseBox(confirm, MOUSE_LEFT);
    wait(randomRange(1000, 1500));
  end else
    self.__returnToSummary();


  result := self.__isSlotBuying(slotNumber, True) or self.__isSlotSelling(slotNumber, True);
  print('TRSGrandExchange.editOffer(): ' + boolToStr(result), TDebug.SUB);

  if waitCollect then
    self.waitCollectSlot(slotNumber, waitTime);
end;

(*
getPrice
--------

.. code-block:: pascal

    TRSGrandExchange.getPrice(item: integer): integer;

Returns the current market price of any item in the Grand Exchange. The **item**
parameter must be the item's ID number.

IDs can be found on the Grand Exchange website at the end of the URL. For example,
the ID in the below URL is 2150 (Swamp toad)

http://services.runescape.com/m=itemdb_rs/viewitem.ws?obj=2150

.. note::

    - by The Mayor
    - Last Updated: 16 July 2015 by The Mayor

Example:

.. code-block:: pascal

    var
      toadPrice: Integer;
    begin
      toadPrice := grandExchange.getPrice(2150);  // The ID for Swamp toads
      profit := (toadPrice * toadsCollected);
    end;

*)
function TRSGrandExchange.getPrice(ID: integer): integer;
var
  webPage: string;
  TSA: TStringArray;
begin
  webPage := getPage('http://services.runescape.com/m=itemdb_rs/viewitem.ws?obj=' + toStr(ID));
  TSA := multiBetween(webPage, 'average30.push([new Date(',']);');

  if length(TSA) < 1 then
  begin
    print('TRSGrandExchange.getPrice(): Unable to retrieve price for ID: ' + toStr(ID), TDebug.ERROR);
    exit(-1);
  end;

  result := strToInt(Between('), ', ',', TSA[High(TSA)]));
  print('TRSGrandExchange.getPrice(' + toStr(ID) + '): ' + toStr(result));
end;

begin
  grandExchange.__init();
end;

{$f+}
